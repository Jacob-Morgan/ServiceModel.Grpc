<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.Serialization;

namespace ServiceModel.Grpc.Channel
{
<#
for (var argsCount=0; argsCount<5; argsCount++)
{
    var genericArgs = string.Join(", ", Enumerable.Range(1, argsCount).Select(i => "T" + i));
    if (argsCount > 0)
    {
        genericArgs = "<" + genericArgs + ">";
    }

    var ctorArgs = string.Join(", ", Enumerable.Range(1, argsCount).Select(i => "T" + i + " value" + i));
#>
    [Serializable]
    internal sealed class Message<#= genericArgs #> : ISerializable
    {
        public Message(<#= ctorArgs #>)
        {
<#
            for (var a=1; a<=argsCount; a++)
            {
#>
            Value<#= a #> = value<#= a #>;
<#
            }
#>
        }

        public Message(SerializationInfo info, StreamingContext context)
        {
<#
            for (var a=1; a<=argsCount; a++)
            {
#>
            Value<#= a #> = (T<#= a #>)info.GetValue(nameof(Value<#= a #>), typeof(T<#= a #>));
<#
            }
#>
        }

<#
            for (var a=1; a<=argsCount; a++)
            {
#>
        public T<#= a #> Value<#= a #> { get; }
<#
            }
#>

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
<#
            for (var a=1; a<=argsCount; a++)
            {
#>
            info.AddValue(nameof(Value<#= a #>), Value<#= a #>);
<#
            }
#>
        }
    }

<#
}
#>
}